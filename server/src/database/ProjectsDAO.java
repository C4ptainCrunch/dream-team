package database;

import constants.Database;
import models.users.Project;
import models.users.User;
import utils.Log;

import static database.DAOUtilities.initializationPreparedRequest;
import static database.DAOUtilities.mapUser;
import static database.DAOUtilities.silentClosures;

import java.sql.*;
import java.util.ArrayList;
import java.util.logging.Logger;

public class ProjectsDAO {
    private DAOFactory daoFactory;

    private static final Logger logger = Log.getLogger(UsersDAO.class);

    ProjectsDAO(DAOFactory daoFactory){
        this.daoFactory = daoFactory;
    }

    public boolean create(Project project){
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValues = null;
        boolean error = false;
        try {
            connection = daoFactory.getConnection();
            preparedStatement = initializationPreparedRequest(connection, Database.SQL_INSERT_PROJECT, true, project.getUser().getId(), project.getPath(), project.getLast_modification(), project.isWrite_default(), project.isRead_default());
            int statut = preparedStatement.executeUpdate();
            if (statut == 0) {
                logger.severe("Failed to create a project");
            }
            autoGeneratedValues = preparedStatement.getGeneratedKeys();
            if (autoGeneratedValues.next()) {
                project.setId(autoGeneratedValues.getInt(1));
            }
            else{
                logger.severe("Failed to create a project, no auto-generated ID returned.");
            }
        } catch ( SQLIntegrityConstraintViolationException e) {
            logger.warning("Failed to create a project");
            error = true;
        } catch (SQLException e){
            logger.severe(e.getClass().getName() + ": " + e.getMessage());
        }
        finally {
            silentClosures(autoGeneratedValues, preparedStatement, connection);
        }
        return error;
    }

    public String edit(String path, String last_modification, boolean write_perm, boolean read_perm, String old_path){
        int statut = DAOUtilities.executeUpdate(daoFactory, Database.SQL_EDIT_PROJECT, false, path, last_modification, write_perm ? 1 : 0, read_perm ? 1 : 0, old_path);
        return statut == 0 ? "Error" : "OK";
    }

    public Project findByID(int id) {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSetProject = null;
        ResultSet resultSetUser = null;
        Project project = null;
        try{
            resultSetProject = DAOUtilities.executeQuery(daoFactory, connection, preparedStatement, resultSetProject, Database.SQL_SELECT_PROJECT_BY_ID, id);
            resultSetUser = DAOUtilities.executeQuery(daoFactory, connection, preparedStatement, resultSetUser, Database.SQL_SELECT_BY_ID, resultSetProject.getString("id"));
            if (resultSetProject.next() && resultSetUser.next()){
                project = DAOUtilities.mapProject(resultSetProject, resultSetUser);
            }
        } catch (SQLException e) {
            logger.severe(e.getClass().getName() + ": " + e.getMessage());
        } finally {
            silentClosures(resultSetProject, preparedStatement, connection);
            silentClosures(resultSetUser, preparedStatement, connection);
        }
        return project;
    }

    private boolean isAbleByDefault(String query, int id){
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        boolean res = false;
        try{
            resultSet = DAOUtilities.executeQuery(daoFactory, connection, preparedStatement, resultSet, query, id);
            if (resultSet.next()){
                res = resultSet.getInt(0) == 1;
            }
        } catch (SQLException e) {
            logger.severe(e.getClass().getName() + ": " + e.getMessage());
        } finally {
            silentClosures(resultSet, preparedStatement, connection);
        }
        return res;
    }

    public boolean isReadableByDefault(int id) {
        return isAbleByDefault(Database.SQL_PROJECT_IS_READABLE, id);
    }

    public boolean isWritableByDefault(int id) {
        return isAbleByDefault(Database.SQL_PROJECT_IS_WRITABLE, id);
    }
}
