package database;

import models.databaseModels.Permissions;
import models.databaseModels.Project;
import utils.Log;

import static database.DAOUtilities.initializationPreparedRequest;
import static database.DAOUtilities.mapProject;
import static database.DAOUtilities.silentClosures;

import java.sql.*;
import java.util.ArrayList;
import java.util.Optional;
import java.util.logging.Logger;

class ProjectRequests {
    public static final String SQL_INSERT_PROJECT = "INSERT INTO Projects(uid ,user_id, path, last_modification, default_perm_write, default_perm_read) VALUES (?, ?, ?, ?, ?, ?);";
    public static final String SQL_EDIT_PROJECT = "UPDATE Projects SET uid = ?, path = ?, last_modification = ?, default_perm_write = ?, default_perm_read = ? WHERE path = ?";
    public static final String SQL_SELECT_PROJECT_BY_UID = "SELECT uid, user_id, path, last_modification, default_perm_write, default_perm_read FROM Projects WHERE uid = ?";
    public static final String SQL_PROJECT_IS_READABLE = "SELECT default_perm_read FROM Projects WHERE uid = ?";
    public static final String SQL_PROJECT_IS_WRITABLE = "SELECT default_perm_write FROM Projects WHERE uid = ?";
    public static final String SQL_PROJECT_DELETE = "DELETE FROM Projects WHERE uid = ?";
    public static final String SQL_PROJECT_GETALL = "SELECT uid, user_id, path, last_modification, default_perm_write, default_perm_read FROM Projects";
    public static final String SQL_PROJECT_GETALLREADABLES = "SELECT uid, user_id, path, last_modification, default_perm_write, default_perm_read FROM Projects WHERE default_perm_read = 1";
}

public class ProjectsDAO {
    private DAOFactory daoFactory;
    private PermissionsDAO permissionsDAO = new PermissionsDAO(daoFactory);

    private static final Logger logger = Log.getLogger(UsersDAO.class);

    ProjectsDAO(DAOFactory daoFactory){
        this.daoFactory = daoFactory;
    }

    public boolean create(Project project){
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValues = null;
        boolean error = false;
        try {
            connection = daoFactory.getConnection();
            preparedStatement = initializationPreparedRequest(connection, ProjectRequests.SQL_INSERT_PROJECT, true, project.getUid(), project.getUserID(), project.getPath(), project.getLast_modification(), project.isWrite_default(), project.isRead_default());
            int statut = preparedStatement.executeUpdate();
            if (statut == 0) {
                logger.severe("Failed to create a project");
            }
        } catch ( SQLIntegrityConstraintViolationException e) {
            logger.warning("Failed to create a project");
            error = true;
        } catch (SQLException e){
            logger.severe(String.format("%s: %s", e.getClass().getName(), e.getMessage()));
        }
        finally {
            silentClosures(autoGeneratedValues, preparedStatement, connection);
        }
        return error;
    }

    public String edit(String uid, String path, String last_modification, boolean write_perm, boolean read_perm, String old_path){
        int statut = DAOUtilities.executeUpdate(daoFactory, ProjectRequests.SQL_EDIT_PROJECT, uid, path, last_modification, write_perm ? 1 : 0, read_perm ? 1 : 0, old_path);
        return statut == 0 ? "Error" : "OK";
    }

    public Project findByUid(String uid) {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        Project project = null;
        try{
            resultSet = DAOUtilities.executeQuery(daoFactory, connection, preparedStatement, resultSet, ProjectRequests.SQL_SELECT_PROJECT_BY_UID, uid);
            if (resultSet.next()){
                project = DAOUtilities.mapProject(resultSet);
            }
        } catch (SQLException e) {
            logger.severe(String.format("%s: %s", e.getClass().getName(), e.getMessage()));
        } finally {
            silentClosures(resultSet, preparedStatement, connection);
        }
        return project;
    }

    private boolean isAbleByDefault(String query, String uid){
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        boolean res = false;
        try{
            resultSet = DAOUtilities.executeQuery(daoFactory, connection, preparedStatement, resultSet, query, uid);
            if (resultSet.next()){
                res = resultSet.getInt(0) == 1;
            }
        } catch (SQLException e) {
            logger.severe(String.format("%s: %s", e.getClass().getName(), e.getMessage()));
        } finally {
            silentClosures(resultSet, preparedStatement, connection);
        }
        return res;
    }

    public boolean isReadableByDefault(String uid) {
        return isAbleByDefault(ProjectRequests.SQL_PROJECT_IS_READABLE, uid);
    }

    public boolean isWritableByDefault(String uid) {
        return isAbleByDefault(ProjectRequests.SQL_PROJECT_IS_WRITABLE, uid);
    }

    public void deleteProject(String uid) {
        int statut = DAOUtilities.executeUpdate(daoFactory, ProjectRequests.SQL_PROJECT_DELETE, uid);
        if (statut == 0) {
            logger.severe("Failed to delete project " + uid);
        }
    }

    public ArrayList<Project> getAllProjects() {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        ArrayList<Project> projects = new ArrayList<>();
        try {
            resultSet = DAOUtilities.executeQuery(daoFactory, connection, preparedStatement, resultSet, ProjectRequests.SQL_PROJECT_GETALL);
            while (resultSet.next()){
                projects.add(mapProject(resultSet));
            }
        } catch (SQLException e) {
            logger.severe("Counldn't retrieve all projects");
        } finally {
        silentClosures(resultSet, preparedStatement, connection);
        }
        return projects;
    }

    public ArrayList<Project> getAllReadableProject(int userID) {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        ArrayList<Project> projects = new ArrayList<>();
        try {
            resultSet = DAOUtilities.executeQuery(daoFactory, connection, preparedStatement, resultSet, ProjectRequests.SQL_PROJECT_GETALLREADABLES);
            while (resultSet.next()) {
                Project p = mapProject(resultSet);
                Optional<Permissions> permissions = permissionsDAO.findPermissions(p.getUid(), userID);
                if (permissions.isPresent() && permissions.get().isReadable()) {
                    projects.add(p);
                } else if (!permissions.isPresent()){
                    projects.add(p);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            silentClosures(resultSet, preparedStatement, connection);
        }
        return projects;
    }

}
